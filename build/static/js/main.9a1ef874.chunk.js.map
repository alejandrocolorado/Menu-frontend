{"version":3,"sources":["Components/ServicioCard.js","Components/Home.js","App.js","serviceWorker.js","index.js"],"names":["ServicioCards","props","packService","data","className","src","img","alt","servicio","descripcion","Home","serviceRow","document","getElementById","id","href","onClick","scrollLeft","offsetWidth","icon","faAngleLeft","map","item","index","ServicioCard","key","faAngleRight","param","window","location","pathname","slice","App","Places","lazy","fallback","Component","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qTA2BiBA,EAzBK,SAACC,GAEnB,IAAIC,EAAcD,EAAME,KAExB,OACE,6BACE,yBAAKC,UAAU,2BACb,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,aACbC,IAAKH,EAAYI,IACjBC,IAAKL,EAAYM,WAEnB,4BACE,4BACE,4BAAKN,EAAYM,WAEnB,gCAAK,2BAAIN,EAAYO,YAAhB,WCkGNC,EA7GF,WAGX,IAAIC,EAAaC,SAASC,eAAe,QAyCzC,OACE,yBAAKC,GAAG,QACN,6BACE,yBAAKV,UAAU,QAAf,kBACA,yBAAKA,UAAU,aACb,4BACE,4BACE,uBAAGW,KAAK,WAAR,WAGF,4BACE,uBAAGA,KAAK,cAAR,cAEF,4BACE,uBAAGA,KAAK,WAAR,YAEF,4BACE,uBAAGA,KAAK,aAAR,aAEF,4BACE,uBAAGA,KAAK,aAAR,gBAKR,8BACE,6BAASX,UAAU,SAASU,GAAG,UAC7B,yBAAKV,UAAU,SACb,sJAOJ,6BAASU,GAAG,YAAYV,UAAU,aAChC,yBAAKA,UAAU,wBACb,4BAAQU,GAAG,aAAaV,UAAU,aAAaY,QArEvC,WACZL,IACFA,EAAWM,YAAcN,EAAWO,eAoE5B,kBAAC,IAAD,CAAiBC,KAAMC,OAEzB,yBAAKhB,UAAU,sBAAsBU,GAAG,cACtC,yBAAKV,UAAU,YACb,yBAAKA,UAAU,QApEX,CAChB,CACEI,SAAU,aACVC,YAAa,mBACbH,IACE,iHAEJ,CACEE,SAAU,iBACVC,YAAa,mBACbH,IACE,iHAEJ,CACEE,SAAU,uBACVC,YAAa,mBACbH,IACE,sJAEJ,CACEE,SAAU,oBACVC,YAAa,mBACbH,IACE,oHA8CuBe,KAAI,SAACC,EAAMC,GAAP,OACf,kBAACC,EAAD,CAAerB,KAAMmB,EAAMG,IAAKF,UAKxC,4BAAQT,GAAG,aAAaV,UAAU,aAAaY,QAvFtC,WACbL,IACFA,EAAWM,YAAcN,EAAWO,eAsF5B,kBAAC,IAAD,CAAiBC,KAAMO,SAK7B,6BAASZ,GAAG,SAASV,UAAU,WAE/B,6BAASU,GAAG,WAAWV,UAAU,aAEjC,6BAASU,GAAG,WAAWV,UAAU,gBC1GnCuB,EAAQC,OAAOC,SAASC,SAASC,MAAM,GAExBC,E,uKAEjB,GAAc,KAAVL,EACF,OAAO,kBAAC,EAAD,MAEP,IAAMM,EAASC,gBAAK,kBAAM,sDAE1B,OACE,kBAAC,IAAD,KACE,kBAAC,WAAD,CAAUC,SAAU,kBAAC,EAAD,OAClB,kBAACF,EAAD,Y,GAVqBG,aCMbC,QACW,cAA7BT,OAAOC,SAASS,UAEe,UAA7BV,OAAOC,SAASS,UAEhBV,OAAOC,SAASS,SAASC,MACvB,2DCXNC,IAASC,OACL,kBAAC,EAAD,MACF7B,SAASC,eAAe,SD0HpB,kBAAmB6B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9a1ef874.chunk.js","sourcesContent":["import React from \"react\";\n\nconst ServicioCards = (props) => {\n    \n    let packService = props.data;\n  \n    return (\n      <div>\n        <div className=\"servicio-card-container\">\n          <div className=\"servicio-card\" >\n              <img className=\"object-fit\"\n                src={packService.img}\n                alt={packService.servicio}\n              ></img>\n              <ul>\n                <li>\n                  <h4>{packService.servicio}</h4>\n                </li>\n                <li> <p>{packService.descripcion} </p></li>\n                       </ul>\n            </div>\n          \n        </div>\n      </div>\n    );\n  };\n  \n  export default ServicioCards;","import React from \"react\";\nimport \"./../../src/Home.css\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faAngleLeft, faAngleRight } from \"@fortawesome/free-solid-svg-icons\";\nimport ServicioCards from \"./ServicioCard\";\n\nconst Home = () => {\n  // --------------------- control carousel de peliculas ------------\n\n  let serviceRow = document.getElementById(\"root\");\n\n\n  const rigthClick = () => {\n    if (serviceRow) {\n      serviceRow.scrollLeft += serviceRow.offsetWidth;\n    }\n  };\n\n  const leftClick = () => {\n    if (serviceRow) {\n      serviceRow.scrollLeft -= serviceRow.offsetWidth;\n    }\n  };\n\n  let packService = [\n    {\n      servicio: \"Fotografia\",\n      descripcion: \"loremunmonnujkjf\",\n      img:\n        \"https://images.pexels.com/photos/233314/pexels-photo-233314.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260\",\n    },\n    {\n      servicio: \"Desarrollo Web\",\n      descripcion: \"loremunmonnujkjf\",\n      img:\n        \"https://images.pexels.com/photos/270348/pexels-photo-270348.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260\",\n    },\n    {\n      servicio: \"Community Management\",\n      descripcion: \"loremunmonnujkjf\",\n      img:\n        \"https://images.pexels.com/photos/147413/twitter-facebook-together-exchange-of-information-147413.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260\",\n    },\n    {\n      servicio: \"Dise√±o Grafico\",\n      descripcion: \"loremunmonnujkjf\",\n      img:\n        \"https://images.pexels.com/photos/3662630/pexels-photo-3662630.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260\",\n    },\n  ];\n  return (\n    <div id=\"caca\">\n      <nav>\n        <div className=\"logo\">Collabo Studio</div>\n        <div className=\"nav-links\">\n          <ul>\n            <li>\n              <a href=\"#Inicio\">Inicio</a>\n            </li>\n            \n            <li>\n              <a href=\"#Servicios\">Servicios</a>\n            </li>\n            <li>\n              <a href=\"#MenuQR\">Menu QR</a>\n            </li>\n            <li>\n              <a href=\"#Nosotors\">Nosotros</a>\n            </li>\n            <li>\n              <a href=\"#Contacto\">Contacto</a>\n            </li>\n          </ul>\n        </div>\n      </nav>\n      <main>\n        <section className=\"Inicio\" id=\"Inicio\">\n          <div className=\"frase\">\n            <h5>\n              In a context of environmental collapse, design can open a space\n              for dialogue between humans and other living beings.\n            </h5>\n          </div>\n        </section>\n\n        <section id=\"Servicios\" className=\"Servicios\">\n          <div className=\"contenedor-principal\">\n            <button id=\"flecha-izq\" className=\"flecha-izq\" onClick={leftClick}>\n              <FontAwesomeIcon icon={faAngleLeft} />\n            </button>\n            <div className=\"contenedor-carousel\" id=\"serviceRow\">\n              <div className=\"carousel\">\n                <div className=\"serv\">\n                  {packService.map((item, index) => (\n                    <ServicioCards data={item} key={index} />\n                  ))}\n                </div>\n              </div>\n            </div>\n            <button id=\"flecha-der\" className=\"flecha-der\" onClick={rigthClick}>\n              <FontAwesomeIcon icon={faAngleRight} />\n            </button>\n          </div>\n        </section>\n\n        <section id=\"MenuQR\" className=\"MenuQR\"></section>\n\n        <section id=\"Nosotros\" className=\"Nosotros\"></section>\n\n        <section id=\"Contacto\" className=\"Contacto\"></section>\n      </main>\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { Component, Suspense, lazy } from \"react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport Home from \"./Components/Home\";\n\nconst param = window.location.pathname.slice(1);\n\nexport default class App extends Component {\n  render() {\n    if (param === \"\") {\n      return <Home />;\n    } else {\n      const Places = lazy(() => import(\"./Clients/places\"));\n\n      return (\n        <Router>\n          <Suspense fallback={<Home />}>\n            <Places />\n          </Suspense>\n        </Router>\n      );\n    }\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}